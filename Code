pragma solidity ^0.5.17;


//Registration Smart contract

contract Registration {
    
    address public FDA; //Ethereum address of the FDA
    address public LocalRegulator; //Ethereum address of local regulator
    mapping(address => bool) public manufacturer; //a mapping that lists all authorized manufacturers
    mapping(address => bool) public storagecenter; //a mapping for authorized largescale storage centers
    mapping(address => bool) public distributor; //a mapping that lists all authorized distributors
    mapping(address => bool) public healthcarecenter; //a mapping for all authorized healthcare centers
    
    //Registration Events
    
    event RegistrationSCDeployer (address indexed FDA); //An event to show the address of the registration SC deployer

    //Modifiers
    
    modifier onlyFDA() {
        require(FDA == msg.sender, "Only the FDA is eligible to run this function");
        _;
    }
    
    modifier onlyLocalRegulator {
        require(LocalRegulator == msg.sender , "Only the Local Regulator is eligible to run this function");
        _;
    }
    
    modifier onlyhealthcarecenter{
        require(healthcarecenter[msg.sender] , "Only the healthcare center is eligible to run this function");
        _;
    }
    
    //Creating the contract constructor

    constructor() public {
        
        FDA = msg.sender;
        emit RegistrationSCDeployer(FDA);

    }
    
    //Registration Functions
    
    function manufacturerRegistration (address user) public onlyFDA {
        require(manufacturer[user] == false, "The user is already registered");
        manufacturer[user] = true;
        
    }
    
        
    function storagecenterRegistration (address user) public onlyLocalRegulator {
        require(storagecenter[user] == false, "The user is already registered");
        storagecenter[user] = true;
    }
    
    function distributorRegistration (address user) public onlyLocalRegulator {
        require(distributor[user] == false, "The user is already registered");
        distributor[user] = true;
    }

    
    function healthcarecenterRegistration (address user) public onlyLocalRegulator{
        require(healthcarecenter[user] == false, "The user is already registered");
        healthcarecenter[user] = true;
    }
    

    

    
}

//Ordering Smart contract

contract Ordering{
    
    //Declaring variables
    
    Registration public regcontract; //used to access variables and functions from the registration contract
    uint public StartingTime; //Used to define the starting time of deploying the ordering SC
    uint public BidsDuration; 
    uint public DistributorsSelectionDuration;
    uint public MaxVaccineLotAmount; //The maximum amount of COVID-19 vaccine LOTs that the manufacturer can produce
    uint PlacedBidsCounter = 0; //Used to ensure the bids do not exceed the maximum
    uint AmountCoveredCounter = 0; //Used for the distributors
    uint public CurrentBids;
    uint public CurrentCoveredAmount;
    uint public PlacedBidAmount; //Finds the individual amount of each bid
    uint public VaccineLotAmount; //The amount of COVID-19 vaccines to be produced, should be equal to PlacedOrdersCounter
    uint public OrderNumber; //Used by the manufacturer to distinguish the different orders
    mapping(address => bool) public BidderSelected; //A mapping for healthcarecenters that have priority in orders
    mapping(address => bool) public signed; //A mapping used to track which entity has agreed to proceed with covid-19 vaccine delivery/ProductionSCDeployer
    mapping(address => bool) public SelectedDistributor; //A mapping to choose the selected distributor for delivery
    bool public MaxAmountBySingleDistributor; //This is to check if a single distributor has committed to cover all the amount by itself
    address[] public manufacturersArray;
    address[] public distributorArray;
    address[] public storagecenterArray;
    address[] public healthcarecenterArray;
    enum  ConsensusState  {NotReached, Reached}
    ConsensusState public Consensus;
    enum Readiness {NotReady, Ready}
    Readiness public ManufacturerReadiness;
    Readiness public DistributorReadiness;
    Readiness public StorageReadiness;
    Readiness public HealthCareCenterReadiness;
    mapping(address => HCPreference) public PreferredDistributor; //A mapping to choose the preferred distributor by the RegistrationSCDeployer
    struct HCPreference{
    address pdistributor;
    bool available;
    } 
    
 


    
    //Ordering events

    event OrderingTimeWindow (address indexed manufacturer, uint _MaxVaccineLotAmount, uint _BidsDuration, uint _DistributorsSelectionDuration); //An event to show the address of the ordering SC deployer and the MaxVaccineLotAmount
    event consensusState (address indexed _address, ConsensusState _Consensus); //An event declaring the readiness of the manufacturer 
    event MultipleDistributorsCommitment(address indexed _distributor, uint _amountcovered, uint _CurrentCoveredAmount);
    event SingleDistributorCommitment(address indexed _distributor, uint _amountcovered);
    event placedbid(address indexed healthcarecenter, uint placedorder);
    event Storagecentercommitment(address indexed storagecenter, uint availablecapacity);
    event VaccineLotsManufactured(address indexed manufacturer, uint indexed _ordernumber, uint _VaccineLotsProduced); //An event to confirm the manufacturing of the vaccine lots

    //Modifiers
    
    modifier onlyhealthcarecenter{

    require(regcontract.healthcarecenter(msg.sender), "Only the healthcarecenter is allowed to execute this function");
    _;
    }
    
    modifier onlymanufacturer{

    require(regcontract.manufacturer(msg.sender), "Only the manufacturer is allowed to execute this function");
    _;
    }
    
    modifier onlyDistributor{

    require(regcontract.distributor(msg.sender), "Only the distributor is allowed to execute this function");
    _;
    }

    //Constructor
    
    constructor(address RegistrationSCaddress, uint _MaxVaccineLotAmount) public{
        
        regcontract = Registration(RegistrationSCaddress);
        StartingTime = block.timestamp; //Now can be used as well instead of block.timestamp
        StorageCenterCommittingDuration = StartingTime + 14 * 1 days; 
        DistributorsSelectionDuration = StartingTime + 14 * 1 days; //During this duration, the distributors will commit to fulfillng the delivery of the required amount
        BidsDuration =  30 * 1 days; 
        MaxVaccineLotAmount = _MaxVaccineLotAmount;
        emit OrderingTimeWindow(msg.sender, MaxVaccineLotAmount, BidsDuration, DistributorsSelectionDuration);
    } 
    
    //Functions
    
    //Storage Center Commitment function
    function StorageCenterCommitment(uint _StorageCapacity) public onlyStorageCenter{ //Here the available capacity is measured in Lots
        require(_StorageCapacity >= MaxVaccineLotAmount, "The Storage capacity is not enough to cover all vaccine Lots");
        require(block.timestamp <= StorageCenterCommittingDuration, "Storage center can no longer commit as the duration is over");
            StorageReadiness = Ready;
        emit Storagecentercommitment(msg.sender , uint availablecapacity);
    }
    
    //Distributor Commitment function
    function DistributorCommitment(uint _AmountCovered) public onlyDistributor{
        require(!SelectedDistributor[msg.sender], "This distributor has already been added to the selected list");
        require(block.timestamp <= DistributorsSelectionDuration, "New Commitments are no longer accepted as the time is over");
        require( AmountCoveredCounter + _AmountCovered < MaxVaccineLotAmount || (MaxAmountBySingleDistributor == false && _AmountCovered >= MaxVaccineLotAmount), "The required amount for delivery has already been covered"); //AmountCoveredCounter or CurrentCoveredAmount?
        if(_AmountCovered < MaxVaccineLotAmount){
            AmountCoveredCounter += _AmountCovered;
            CurrentCoveredAmount = AmountCoveredCounter;
            distributorArray.push(msg.sender);
            SelectedDistributor[msg.sender] = true;
            emit MultipleDistributorsCommitment(msg.sender, _AmountCovered, CurrentCoveredAmount); //I stopped here, how to add individual amount? struct?
            
        } else if(_AmountCovered >= MaxVaccineLotAmount){
            for (uint i=0; i<distributorArray.length; i++) {
            SelectedDistributor[distributorArray[i]] = false;
            //delete distributorArray[i];
        }
            //delete distributorArray;
            SelectedDistributor[msg.sender] = true; //This will make the new distributor who is willing to fulfill the amount selected
            distributorArray.push(msg.sender);
            CurrentCoveredAmount = _AmountCovered;
            MaxAmountBySingleDistributor = true;
            emit SingleDistributorCommitment(msg.sender, _AmountCovered);
        }
        
    }
    
    
    // This function is used to match the healthcare center to its prefered distributor, the mapping links the address of the HCcenter with a struct with the details of the PreferredDistributor
    function AddPreferredDistributor (address _distributor) public onlyhealthcarecenter{ 
        require(!PreferredDistributor[msg.sender].available, "This distributor has already been added to the preferred list");
        PreferredDistributor[msg.sender].pdistributor = _distributor;
        PreferredDistributor[msg.sender].available = true;
    }
    
    //Placing Bids function
    function PlaceBid(uint _PlacedBid) public onlyhealthcarecenter{
        require(block.timestamp >= StartingTime + DistributorsSelectionDuration, "Bids cannot be placed because distributors are not fully assigned yet");
        require(block.timestamp <= StartingTime + BidsDuration , "Bids can no longer be placed because bids duration is over");
        require(_PlacedBid + PlacedBidsCounter <= MaxVaccineLotAmount, "The specified amount exceeds the current capacity of the manufacturer");
        require(PreferredDistributor[msg.sender].available, "Your preferred distributor is not available therefore the bid cannot be placed");
        require(!BidderSelected[msg.sender], "This bidder has already placed a bid before");
        PlacedBidsCounter += _PlacedBid;
        CurrentBids = PlacedBidsCounter;
        BidderSelected[msg.sender] = true; //This means the bidder has priority over other bidders based on First come first serve manner
        emit placedbid(msg.sender, _PlacedBid);
        
    }
    
    function OrderingAgreement() public {
    require ((regcontract.manufacturer(msg.sender) && PlacedBidsCounter >= MaxVaccineLotAmount) || regcontract.storagecenter(msg.sender) || (regcontract.distributor(msg.sender) && SelectedDistributor[msg.sender]) || (regcontract.healthcarecenter(msg.sender) &&  BidderSelected[msg.sender]) , "Only authorized entities can execute this function"  );
    require (!signed[msg.sender]);
    require (Consensus == ConsensusState.NotReached, "Consensus already reached to start the manufacturing process" );
    

    signed[msg.sender] = true;
    
    
     if(regcontract.manufacturer(msg.sender)) {   // if else statement
         ManufacturerReadiness = Ready;
      } else if(regcontract.storagecenter(msg.sender)){
         StorageReadiness = Ready;
      } else if(regcontract.distributor(msg.sender)){
         distributorArray.push(msg.sender);
      } else {
         HealthCareCenterReadiness = Ready;
      }
      
     if(healthcarecenterArray.length*distributorArray.length*storagecenterArray.length*manufacturersArray.length > 0){ 
         Consensus = ConsensusState.Reached;
     }
      
      
    emit consensusState (msg.sender, Consensus);
    
    }
    
    function BeginManufacturing(uint _ordernumber) public onlymanufacturer{
        require(Consensus == ConsensusState.Reached, "Manufacturing cannot be started because other entities have not agreed yet");
        OrderNumber = _ordernumber;
        VaccineLotAmount = PlacedBidsCounter;
        emit VaccineLotsManufactured(msg.sender, OrderNumber, VaccineLotAmount);
    }

}

//ProofOfDelivery Smart contract

contract PoD{
    
    //Declaring variables
    Registration public regcontract2; //used to access variables and functions from the registration contract
    Ordering public ordcontract; //used to access variables and functions from the ordering contract
    bytes32 public vaccineLotbarcode; //A unique barcode is generated for every vaccine lot
    bytes32 public vaccineLotIPFS;
    uint public dispossedvaccineLots; 
    uint public vaccinesperLot; //The number of vaccines per Lot
    enum  vaccineLotState  {Manufactured, Stored, BeingShipped, Shipped, Received}
    vaccineLotState public Lotstate; //Refers to the state of the controlled drug container
    //enum controlleddrugstate {Prescribed, Administered, Disposed}

    
    //Events
    
    event VaccineLotDetails(address indexed _manufacturer, uint _ordernumber, bytes32 vaccineLotbarcode, bytes32 vaccineLotIPFS, uint vaccinesperLot);
    event VaccineLotStored(address indexed _storagecenter, uint _ordernumber, bytes32 vaccineLotbarcode, bytes32 vaccineLotIPFS);
    event StartShipping(address indexed _distributor, uint _ordernumber, bytes32 vaccineLotbarcode, bytes32 vaccineLotIPFS);
    event EndShipping(address indexed _distributor, uint _ordernumber, bytes32 vaccineLotbarcode, bytes32 vaccineLotIPFS);
    event ConfirmReception(address indexed _healthcarecenter, uint _ordernumber, bytes32 vaccineLotbarcode, bytes32 vaccineLotIPFS);

    //Note: the order number is added to tell to which order this Lot belongs
    
    //Modifiers
    
    modifier onlyManufacturer{
        
        require(regcontract2.manufacturer(msg.sender), "Only the manufacturer is allowed to execute this function");
        _;
    }
    
    modifier onlyDistributor{
    
        require(regcontract2.distributor(msg.sender), "Only the distributor is allowed to execute this function");
        _;
    }
    
    modifier onlyStorageCenter{
    
        require(regcontract2.storagecenter(msg.sender), "Only the storage center is allowed to execute this function");
        _;
    }

    modifier onlyhealthcarecenter{

        require(regcontract2.healthcarecenter(msg.sender), "Only the healthcare center is allowed to execute this function");
        _;
    }
    
    
    //Constructor
    
        constructor(address registrationaddress, address orderingaddress, bytes32 _vaccineLotbarcode, bytes32 _vaccineLotIPFS, uint _vaccinesperLot) public {
        
        //regcontract = Registration(registrationaddress); //links both contracts by setting the address of the registration contract
        //regcontract.CDR();
        regcontract2 = Registration(registrationaddress);
        ordcontract = Ordering(orderingaddress);
        vaccineLotbarcode = _vaccineLotbarcode;
        vaccineLotIPFS = _vaccineLotIPFS;
        vaccinesperLot = _vaccinesperLot;
        Lotstate = vaccineLotState.Manufactured;
        
        emit VaccineLotDetails(msg.sender, ordcontract.OrderNumber(), vaccineLotbarcode, vaccineLotIPFS, vaccinesperLot); 

    }
    
    //Functions
    
        function vaccineLotStored() public onlyStorageCenter{
        require(Lotstate == vaccineLotState.Manufactured, "Can't run this function as the vaccine Lot has already been delivered or not yet manufactured");
        Lotstate = vaccineLotState.Stored;
        emit VaccineLotStored(msg.sender, ordcontract.OrderNumber(), vaccineLotbarcode, vaccineLotIPFS);
    }
        function startShipping() public onlyDistributor{
        require(Lotstate == vaccineLotState.Manufactured || Lotstate == vaccineLotState.Stored, "Can't run this function as the vaccine Lot has already been delivered or not yet manufactured");
        Lotstate = vaccineLotState.BeingShipped;
        emit StartShipping(msg.sender, ordcontract.OrderNumber(), vaccineLotbarcode, vaccineLotIPFS);
    }
    
        function endShipping() public onlyDistributor{
        require(Lotstate == vaccineLotState.BeingShipped, "Can't run this function as the vaccine Lot has already been delivered already or not yet manufactured");
        Lotstate = vaccineLotState.Shipped;
        emit EndShipping(msg.sender, ordcontract.OrderNumber(), vaccineLotbarcode, vaccineLotIPFS);
    }
    
        function confirmReception() public onlyhealthcarecenter{
        require(Lotstate == vaccineLotState.Shipped, "Can't run this function as the vaccine Lot has already been delivered already or not yet manufactured");
        Lotstate = vaccineLotState.Received;
        emit EndShipping(msg.sender, ordcontract.OrderNumber(), vaccineLotbarcode, vaccineLotIPFS);
    }
    
    
}


//Proof of Consumption Smart Contract

    //Declaring variables

    //Events

    //Modifiers

    //Constructor

    //Functions


